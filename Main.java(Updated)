/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
//import edu.wpi.first.wpilibj.command.Command;  
//import edu.wpi.first.wpilibj.command.Scheduler;
//import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
//import frc.robot.subsystems.Drivetrain;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  // public static Drivetrain drivetrainSub = new Drivetrain();
  // public static BallLower ballLowerSub =  new BallLower();
  // public static BallShoot ballShootSub = new BallShoot();
  // public static Lift liftSub = new Lift();
  public static OI oi;

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */

   //CANSparkMax leftShooter;
   //CANSparkMax rightShooter;

   //CANSparkMax elevator;
   //CANSparkMax arm;

   XboxController controller;

   CANSparkMax frontRight;
   CANSparkMax frontLeft;
   CANSparkMax rearRight;
   CANSparkMax rearLeft;

   SpeedControllerGroup left;
   SpeedControllerGroup right;


  @Override
  public void robotInit() {
    oi = new OI();
    UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
    camera.setResolution(256, 144);
    camera.setFPS(30);

    frontRight = new CANSparkMax(RobotMap.Right_Front_Drive_Motor, MotorType.kBrushed);
    frontLeft = new CANSparkMax(RobotMap.Left_Front_Drive_Motor, MotorType.kBrushed);
    rearRight = new CANSparkMax(RobotMap.Right_Rear_Drive_Motor, MotorType.kBrushed);
    rearLeft = new CANSparkMax(RobotMap.Left_Rear_Drive_Motor, MotorType.kBrushed);
   
    left = new SpeedControllerGroup(frontLeft, rearLeft);
    right = new SpeedControllerGroup(frontRight, rearRight);

    //leftShooter = new CANSparkMax(9, MotorType.kBrushed);
    //rightShooter = new CANSparkMax(10, MotorType.kBrushed); 

    //arm = new CANSparkMax(11, MotorType.kBrushed); 
    //elevator = new CANSparkMax(12, MotorType.kBrushed);

   // controller = new XboxController(1);

    // liftSub.getLiftEncoder().reset();
    // liftSub.getLiftEncoder().setDistancePerPulse(Math.PI*6/4);
    // ballLowerSub.getTiltEncoder().reset();
    // ballLowerSub.getTiltEncoder().setDistancePerPulse(Math.PI*6/4);
  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {

    

  }

  /**
   * This function is called once each time the robot enters Disabled mode.
   * You can use it to reset any subsystem information you want to clear when
   * the robot is disabled.
   */
  @Override
  public void disabledInit() {
  }

  @Override
  public void disabledPeriodic() {
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString code to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional commands to the
   * chooser code above (like the commented example) or additional comparisons
   * to the switch structure below with additional strings & commands.
   */
  @Override
  public void autonomousInit() {
  
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {

  }

  @Override
  public void teleopInit() {
    
  }

  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopPeriodic() {
    // Scheduler.getInstance().run();
    //elevator.set(-controller.getRawAxis(5));
    //arm.set(0.8 * controller.getRawAxis(1));

    //if (Math.abs(controller.getRawAxis(3)) > 0.15) {
     // leftShooter.set(-controller.getRawAxis(3));
   //   rightShooter.set(controller.getRawAxis(3));
   // }
   // else if (Math.abs(controller.getRawAxis(2)) > 0.15) {
    //  leftShooter.set(0.25 * controller.getRawAxis(2));
    //  rightShooter.set(0.25 *-controller.getRawAxis(2));
   // } else {
     // leftShooter.set(0.0);
      //rightShooter.set(0.0);  
    

    
  

  double xinput = oi.getDriverJoystick().getX();
  double yinput = oi.getDriverJoystick().getY();

  if (xinput < 0) {
    xinput = -Math.pow(xinput, 2);
  } 
  else {
    xinput = Math.pow(xinput, 2);
  }

  if (yinput < 0) {
    yinput = -Math.pow(yinput,2);
  }
  else {
    yinput = Math.pow(yinput, 2);
  }


  left.set(yinput-xinput);
  right.set(-yinput-xinput);

  /**
   * This function is called periodically during test mode.
   */


}
}
